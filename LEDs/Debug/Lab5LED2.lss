
Lab5LED2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b12  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009b7  00000000  00000000  00000d52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000460  00000000  00000000  00001709  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004cb  00000000  00000000  00001bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014b  00000000  00000000  0000209b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000021e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  c4:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <delaydim>:

void delaydim(char OCRB)
{
	
	
	LEDON;
  cc:	2d 9a       	sbi	0x05, 5	; 5
	while ( (TIFR0 & (1 << OCF0B) ) == 0){} // wait for OCR0B overflow event
  ce:	aa 9b       	sbis	0x15, 2	; 21
  d0:	fe cf       	rjmp	.-4      	; 0xce <delaydim+0x2>
	TIFR0 |= (1 << OCF0B);
  d2:	aa 9a       	sbi	0x15, 2	; 21
	
	 if (OCR0B == 156)
  d4:	88 b5       	in	r24, 0x28	; 40
  d6:	8c 39       	cpi	r24, 0x9C	; 156
  d8:	11 f4       	brne	.+4      	; 0xde <delaydim+0x12>
	 {
		 OCR0B =155;
  da:	8b e9       	ldi	r24, 0x9B	; 155
  dc:	88 bd       	out	0x28, r24	; 40
		 
	 }
	 
	 if (OCR0B < 1)
  de:	88 b5       	in	r24, 0x28	; 40
  e0:	81 11       	cpse	r24, r1
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <delaydim+0x1c>
	 {
		 OCR0B =1;
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	88 bd       	out	0x28, r24	; 40
		 
	 }
	
	LEDOFF;
  e8:	2d 98       	cbi	0x05, 5	; 5
	while ( (TIFR0 & (1 << OCF0A) ) == 0){} // wait for OCR0A overflow event
  ea:	a9 9b       	sbis	0x15, 1	; 21
  ec:	fe cf       	rjmp	.-4      	; 0xea <delaydim+0x1e>
	TIFR0 |= (1 << OCF0A);
  ee:	a9 9a       	sbi	0x15, 1	; 21
  f0:	08 95       	ret

000000f2 <main>:

void delaydim(char OCRB);

int main(void)
{
   	DDRB |= (1 << DDB5);
  f2:	25 9a       	sbi	0x04, 5	; 4
   	PORTB |= (1 << PORTB7);
  f4:	2f 9a       	sbi	0x05, 7	; 5
	   
	/* setting FAST PWM mode */
	TCCR0A |= (1 << WGM00) |(1<< WGM01) ;
  f6:	84 b5       	in	r24, 0x24	; 36
  f8:	83 60       	ori	r24, 0x03	; 3
  fa:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << WGM02) ;
  fc:	85 b5       	in	r24, 0x25	; 37
  fe:	88 60       	ori	r24, 0x08	; 8
 100:	85 bd       	out	0x25, r24	; 37
	/* preset 1024  */
	TCCR0B |= (1 << CS00) |(1 << CS02);
 102:	85 b5       	in	r24, 0x25	; 37
 104:	85 60       	ori	r24, 0x05	; 5
 106:	85 bd       	out	0x25, r24	; 37

	
	/* setting to 10ms occurs at 157-1 count */
	OCR0A = 156;
 108:	8c e9       	ldi	r24, 0x9C	; 156
 10a:	87 bd       	out	0x27, r24	; 39
	 OCR0B =1;
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	88 bd       	out	0x28, r24	; 40
	  //int x=0; 
	   
    while (1) 
    {
		if(!(PINB &= (1 << PINB7)))
 110:	83 b1       	in	r24, 0x03	; 3
 112:	80 78       	andi	r24, 0x80	; 128
 114:	83 b9       	out	0x03, r24	; 3
 116:	81 11       	cpse	r24, r1
 118:	07 c0       	rjmp	.+14     	; 0x128 <main+0x36>
				 //
			 //}
			
			
			 
		 delaydim(OCR0B);
 11a:	88 b5       	in	r24, 0x28	; 40
 11c:	0e 94 66 00 	call	0xcc	; 0xcc <delaydim>
		 OCR0B++;
 120:	88 b5       	in	r24, 0x28	; 40
 122:	8f 5f       	subi	r24, 0xFF	; 255
 124:	88 bd       	out	0x28, r24	; 40
 126:	f4 cf       	rjmp	.-24     	; 0x110 <main+0x1e>
						 //x =0;
						 //
					 //}
			//
					
				delaydim(OCR0B);
 128:	88 b5       	in	r24, 0x28	; 40
 12a:	0e 94 66 00 	call	0xcc	; 0xcc <delaydim>
				OCR0B--;
 12e:	88 b5       	in	r24, 0x28	; 40
 130:	81 50       	subi	r24, 0x01	; 1
 132:	88 bd       	out	0x28, r24	; 40
 134:	ed cf       	rjmp	.-38     	; 0x110 <main+0x1e>

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
