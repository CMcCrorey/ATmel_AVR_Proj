
Lab6Music.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010bf  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009c4  00000000  00000000  000015a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000064b  00000000  00000000  00001f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000025b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c6  00000000  00000000  000025fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000099a  00000000  00000000  00002ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000345c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	dc 01       	movw	r26, r24
  b6:	3a 01       	movw	r6, r20
  b8:	3a 01       	movw	r6, r20
  ba:	3a 01       	movw	r6, r20
  bc:	3a 01       	movw	r6, r20
  be:	3a 01       	movw	r6, r20
  c0:	3a 01       	movw	r6, r20
  c2:	c6 01       	movw	r24, r12
  c4:	3a 01       	movw	r6, r20
  c6:	3a 01       	movw	r6, r20
  c8:	3a 01       	movw	r6, r20
  ca:	3a 01       	movw	r6, r20
  cc:	3a 01       	movw	r6, r20
  ce:	d1 01       	movw	r26, r2
  d0:	46 01       	movw	r8, r12
  d2:	4b 01       	movw	r8, r22
  d4:	58 01       	movw	r10, r16
  d6:	6e 01       	movw	r12, r28
  d8:	79 01       	movw	r14, r18
  da:	84 01       	movw	r16, r8
  dc:	9a 01       	movw	r18, r20
  de:	a5 01       	movw	r20, r10
  e0:	b0 01       	movw	r22, r0
  e2:	3a 01       	movw	r6, r20
  e4:	3a 01       	movw	r6, r20
  e6:	3a 01       	movw	r6, r20
  e8:	3a 01       	movw	r6, r20
  ea:	3a 01       	movw	r6, r20
  ec:	3a 01       	movw	r6, r20
  ee:	3a 01       	movw	r6, r20
  f0:	63 01       	movw	r12, r6
  f2:	8f 01       	movw	r16, r30
  f4:	bb 01       	movw	r22, r22
  f6:	e7 01       	movw	r28, r14

000000f8 <__ctors_end>:
  f8:	11 24       	eor	r1, r1
  fa:	1f be       	out	0x3f, r1	; 63
  fc:	cf ef       	ldi	r28, 0xFF	; 255
  fe:	d8 e0       	ldi	r29, 0x08	; 8
 100:	de bf       	out	0x3e, r29	; 62
 102:	cd bf       	out	0x3d, r28	; 61
 104:	0e 94 2e 01 	call	0x25c	; 0x25c <main>
 108:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <Scan_KeypadC>:
char Scan_KeypadC ()

{
	char x = 'F';
	
	DDRC |= ((1 << DDC0)|(1 << DDC1)|(1 << DDC2)|(1 << DDC3));
 110:	87 b1       	in	r24, 0x07	; 7
 112:	8f 60       	ori	r24, 0x0F	; 15
 114:	87 b9       	out	0x07, r24	; 7
	PORTB |= ((1 << PORTB0)|(1 << PORTB1)|(1 << PORTB2)|(1 << PORTB3));
 116:	85 b1       	in	r24, 0x05	; 5
 118:	8f 60       	ori	r24, 0x0F	; 15
 11a:	85 b9       	out	0x05, r24	; 5
 11c:	e1 e0       	ldi	r30, 0x01	; 1
 11e:	f0 e0       	ldi	r31, 0x00	; 0


char Scan_KeypadC ()

{
	char x = 'F';
 120:	86 e4       	ldi	r24, 0x46	; 70
	for (int i =0; i< 4; i++)
	{
		
		
		PORTC |= ((1 << PORTC0)|(1 << PORTC1)|(1 << PORTC2)|(1 << PORTC3));
		PORTC &= ~(1 << i );
 122:	a1 e0       	ldi	r26, 0x01	; 1
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	01 c0       	rjmp	.+2      	; 0x12a <Scan_KeypadC+0x1a>
 128:	31 96       	adiw	r30, 0x01	; 1
 12a:	9f 01       	movw	r18, r30
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	31 09       	sbc	r19, r1
	
	for (int i =0; i< 4; i++)
	{
		
		
		PORTC |= ((1 << PORTC0)|(1 << PORTC1)|(1 << PORTC2)|(1 << PORTC3));
 130:	98 b1       	in	r25, 0x08	; 8
 132:	9f 60       	ori	r25, 0x0F	; 15
 134:	98 b9       	out	0x08, r25	; 8
		PORTC &= ~(1 << i );
 136:	48 b1       	in	r20, 0x08	; 8
 138:	bd 01       	movw	r22, r26
 13a:	02 2e       	mov	r0, r18
 13c:	02 c0       	rjmp	.+4      	; 0x142 <Scan_KeypadC+0x32>
 13e:	66 0f       	add	r22, r22
 140:	77 1f       	adc	r23, r23
 142:	0a 94       	dec	r0
 144:	e2 f7       	brpl	.-8      	; 0x13e <Scan_KeypadC+0x2e>
 146:	96 2f       	mov	r25, r22
 148:	90 95       	com	r25
 14a:	94 23       	and	r25, r20
 14c:	98 b9       	out	0x08, r25	; 8
		
		
		switch (i)
 14e:	21 30       	cpi	r18, 0x01	; 1
 150:	31 05       	cpc	r19, r1
 152:	11 f1       	breq	.+68     	; 0x198 <Scan_KeypadC+0x88>
 154:	40 f0       	brcs	.+16     	; 0x166 <Scan_KeypadC+0x56>
 156:	22 30       	cpi	r18, 0x02	; 2
 158:	31 05       	cpc	r19, r1
 15a:	b9 f1       	breq	.+110    	; 0x1ca <Scan_KeypadC+0xba>
 15c:	23 30       	cpi	r18, 0x03	; 3
 15e:	31 05       	cpc	r19, r1
 160:	09 f4       	brne	.+2      	; 0x164 <Scan_KeypadC+0x54>
 162:	49 c0       	rjmp	.+146    	; 0x1f6 <Scan_KeypadC+0xe6>
 164:	5e c0       	rjmp	.+188    	; 0x222 <Scan_KeypadC+0x112>
		{
			case 0:
			if (!(PINB &= (1 << PINB0)))
 166:	93 b1       	in	r25, 0x03	; 3
 168:	91 70       	andi	r25, 0x01	; 1
 16a:	93 b9       	out	0x03, r25	; 3
 16c:	99 23       	and	r25, r25
 16e:	09 f4       	brne	.+2      	; 0x172 <Scan_KeypadC+0x62>
 170:	5d c0       	rjmp	.+186    	; 0x22c <Scan_KeypadC+0x11c>
			{
				x='1';
			}
			else if (!(PINB &= (1 << PINB1)))
 172:	93 b1       	in	r25, 0x03	; 3
 174:	92 70       	andi	r25, 0x02	; 2
 176:	93 b9       	out	0x03, r25	; 3
 178:	99 23       	and	r25, r25
 17a:	09 f4       	brne	.+2      	; 0x17e <Scan_KeypadC+0x6e>
 17c:	59 c0       	rjmp	.+178    	; 0x230 <Scan_KeypadC+0x120>
			{
				x ='2';
			}
			
			else if (!(PINB &= (1 << PINB2)))
 17e:	93 b1       	in	r25, 0x03	; 3
 180:	94 70       	andi	r25, 0x04	; 4
 182:	93 b9       	out	0x03, r25	; 3
 184:	99 23       	and	r25, r25
 186:	09 f4       	brne	.+2      	; 0x18a <Scan_KeypadC+0x7a>
 188:	55 c0       	rjmp	.+170    	; 0x234 <Scan_KeypadC+0x124>
			{
				x ='3';
			}
			else if (!(PINB &= (1 << PINB3)))
 18a:	93 b1       	in	r25, 0x03	; 3
 18c:	98 70       	andi	r25, 0x08	; 8
 18e:	93 b9       	out	0x03, r25	; 3
 190:	91 11       	cpse	r25, r1
 192:	ca cf       	rjmp	.-108    	; 0x128 <Scan_KeypadC+0x18>
			{
				x='A';
 194:	81 e4       	ldi	r24, 0x41	; 65
 196:	c8 cf       	rjmp	.-112    	; 0x128 <Scan_KeypadC+0x18>
			}
			break;
			
			
			case 1:
			if (!(PINB &= (1 << PINB0)))
 198:	93 b1       	in	r25, 0x03	; 3
 19a:	91 70       	andi	r25, 0x01	; 1
 19c:	93 b9       	out	0x03, r25	; 3
 19e:	99 23       	and	r25, r25
 1a0:	09 f4       	brne	.+2      	; 0x1a4 <Scan_KeypadC+0x94>
 1a2:	4a c0       	rjmp	.+148    	; 0x238 <Scan_KeypadC+0x128>
			{
				x='4';
			}
			else if (!(PINB &= (1 << PINB1)))
 1a4:	93 b1       	in	r25, 0x03	; 3
 1a6:	92 70       	andi	r25, 0x02	; 2
 1a8:	93 b9       	out	0x03, r25	; 3
 1aa:	99 23       	and	r25, r25
 1ac:	09 f4       	brne	.+2      	; 0x1b0 <Scan_KeypadC+0xa0>
 1ae:	46 c0       	rjmp	.+140    	; 0x23c <Scan_KeypadC+0x12c>
			{
				x='5';
			}
			
			else if (!(PINB &= (1 << PINB2)))
 1b0:	93 b1       	in	r25, 0x03	; 3
 1b2:	94 70       	andi	r25, 0x04	; 4
 1b4:	93 b9       	out	0x03, r25	; 3
 1b6:	99 23       	and	r25, r25
 1b8:	09 f4       	brne	.+2      	; 0x1bc <Scan_KeypadC+0xac>
 1ba:	42 c0       	rjmp	.+132    	; 0x240 <Scan_KeypadC+0x130>
			{
				x='6';
			}
			else if (!(PINB &= (1 << PINB3)))
 1bc:	93 b1       	in	r25, 0x03	; 3
 1be:	98 70       	andi	r25, 0x08	; 8
 1c0:	93 b9       	out	0x03, r25	; 3
 1c2:	91 11       	cpse	r25, r1
 1c4:	b1 cf       	rjmp	.-158    	; 0x128 <Scan_KeypadC+0x18>
			{
				x='B';
 1c6:	82 e4       	ldi	r24, 0x42	; 66
 1c8:	af cf       	rjmp	.-162    	; 0x128 <Scan_KeypadC+0x18>
			}
			break;
			
			case 2:
			if (!(PINB &= (1 << PINB0)))
 1ca:	93 b1       	in	r25, 0x03	; 3
 1cc:	91 70       	andi	r25, 0x01	; 1
 1ce:	93 b9       	out	0x03, r25	; 3
 1d0:	99 23       	and	r25, r25
 1d2:	c1 f1       	breq	.+112    	; 0x244 <Scan_KeypadC+0x134>
			{
				x='7';
			}
			else if (!(PINB &= (1 << PINB1)))
 1d4:	93 b1       	in	r25, 0x03	; 3
 1d6:	92 70       	andi	r25, 0x02	; 2
 1d8:	93 b9       	out	0x03, r25	; 3
 1da:	99 23       	and	r25, r25
 1dc:	a9 f1       	breq	.+106    	; 0x248 <Scan_KeypadC+0x138>
			{
				x='8';
			}
			
			else if (!(PINB &= (1 << PINB2)))
 1de:	93 b1       	in	r25, 0x03	; 3
 1e0:	94 70       	andi	r25, 0x04	; 4
 1e2:	93 b9       	out	0x03, r25	; 3
 1e4:	99 23       	and	r25, r25
 1e6:	91 f1       	breq	.+100    	; 0x24c <Scan_KeypadC+0x13c>
			{
				x='9';
			}
			else if (!(PINB &= (1 << PINB3)))
 1e8:	93 b1       	in	r25, 0x03	; 3
 1ea:	98 70       	andi	r25, 0x08	; 8
 1ec:	93 b9       	out	0x03, r25	; 3
 1ee:	91 11       	cpse	r25, r1
 1f0:	9b cf       	rjmp	.-202    	; 0x128 <Scan_KeypadC+0x18>
			{
				x='C';
 1f2:	83 e4       	ldi	r24, 0x43	; 67
 1f4:	99 cf       	rjmp	.-206    	; 0x128 <Scan_KeypadC+0x18>
			}
			break;
			
			case 3:
			if (!(PINB &= (1 << PINB0)))
 1f6:	93 b1       	in	r25, 0x03	; 3
 1f8:	91 70       	andi	r25, 0x01	; 1
 1fa:	93 b9       	out	0x03, r25	; 3
 1fc:	99 23       	and	r25, r25
 1fe:	41 f1       	breq	.+80     	; 0x250 <Scan_KeypadC+0x140>
			{
				x='*';
			}
			else if (!(PINB &= (1 << PINB1)))
 200:	93 b1       	in	r25, 0x03	; 3
 202:	92 70       	andi	r25, 0x02	; 2
 204:	93 b9       	out	0x03, r25	; 3
 206:	99 23       	and	r25, r25
 208:	29 f1       	breq	.+74     	; 0x254 <Scan_KeypadC+0x144>
			{
				x='0';
			}
			
			else if (!(PINB &= (1 << PINB2)))
 20a:	93 b1       	in	r25, 0x03	; 3
 20c:	94 70       	andi	r25, 0x04	; 4
 20e:	93 b9       	out	0x03, r25	; 3
 210:	99 23       	and	r25, r25
 212:	11 f1       	breq	.+68     	; 0x258 <Scan_KeypadC+0x148>
			{
				x='#';
			}
			else if (!(PINB &= (1 << PINB3)))
 214:	93 b1       	in	r25, 0x03	; 3
 216:	98 70       	andi	r25, 0x08	; 8
 218:	93 b9       	out	0x03, r25	; 3
 21a:	91 11       	cpse	r25, r1
 21c:	1e c0       	rjmp	.+60     	; 0x25a <Scan_KeypadC+0x14a>
			{
				x='D';
 21e:	84 e4       	ldi	r24, 0x44	; 68
 220:	08 95       	ret
	
	DDRC |= ((1 << DDC0)|(1 << DDC1)|(1 << DDC2)|(1 << DDC3));
	PORTB |= ((1 << PORTB0)|(1 << PORTB1)|(1 << PORTB2)|(1 << PORTB3));
	
	
	for (int i =0; i< 4; i++)
 222:	e4 30       	cpi	r30, 0x04	; 4
 224:	f1 05       	cpc	r31, r1
 226:	0c f4       	brge	.+2      	; 0x22a <Scan_KeypadC+0x11a>
 228:	7f cf       	rjmp	.-258    	; 0x128 <Scan_KeypadC+0x18>
 22a:	08 95       	ret
		switch (i)
		{
			case 0:
			if (!(PINB &= (1 << PINB0)))
			{
				x='1';
 22c:	81 e3       	ldi	r24, 0x31	; 49
 22e:	7c cf       	rjmp	.-264    	; 0x128 <Scan_KeypadC+0x18>
			}
			else if (!(PINB &= (1 << PINB1)))
			{
				x ='2';
 230:	82 e3       	ldi	r24, 0x32	; 50
 232:	7a cf       	rjmp	.-268    	; 0x128 <Scan_KeypadC+0x18>
			}
			
			else if (!(PINB &= (1 << PINB2)))
			{
				x ='3';
 234:	83 e3       	ldi	r24, 0x33	; 51
 236:	78 cf       	rjmp	.-272    	; 0x128 <Scan_KeypadC+0x18>
			
			
			case 1:
			if (!(PINB &= (1 << PINB0)))
			{
				x='4';
 238:	84 e3       	ldi	r24, 0x34	; 52
 23a:	76 cf       	rjmp	.-276    	; 0x128 <Scan_KeypadC+0x18>
			}
			else if (!(PINB &= (1 << PINB1)))
			{
				x='5';
 23c:	85 e3       	ldi	r24, 0x35	; 53
 23e:	74 cf       	rjmp	.-280    	; 0x128 <Scan_KeypadC+0x18>
			}
			
			else if (!(PINB &= (1 << PINB2)))
			{
				x='6';
 240:	86 e3       	ldi	r24, 0x36	; 54
 242:	72 cf       	rjmp	.-284    	; 0x128 <Scan_KeypadC+0x18>
			break;
			
			case 2:
			if (!(PINB &= (1 << PINB0)))
			{
				x='7';
 244:	87 e3       	ldi	r24, 0x37	; 55
 246:	70 cf       	rjmp	.-288    	; 0x128 <Scan_KeypadC+0x18>
			}
			else if (!(PINB &= (1 << PINB1)))
			{
				x='8';
 248:	88 e3       	ldi	r24, 0x38	; 56
 24a:	6e cf       	rjmp	.-292    	; 0x128 <Scan_KeypadC+0x18>
			}
			
			else if (!(PINB &= (1 << PINB2)))
			{
				x='9';
 24c:	89 e3       	ldi	r24, 0x39	; 57
 24e:	6c cf       	rjmp	.-296    	; 0x128 <Scan_KeypadC+0x18>
			break;
			
			case 3:
			if (!(PINB &= (1 << PINB0)))
			{
				x='*';
 250:	8a e2       	ldi	r24, 0x2A	; 42
 252:	08 95       	ret
			}
			else if (!(PINB &= (1 << PINB1)))
			{
				x='0';
 254:	80 e3       	ldi	r24, 0x30	; 48
 256:	08 95       	ret
			}
			
			else if (!(PINB &= (1 << PINB2)))
			{
				x='#';
 258:	83 e2       	ldi	r24, 0x23	; 35
		
		
	}

	return x;
}
 25a:	08 95       	ret

0000025c <main>:


int main(void)
{
		/* setting FAST PWM mode */
		TCCR0A |= (1 << WGM00) |(1<< WGM01) ;
 25c:	84 b5       	in	r24, 0x24	; 36
 25e:	83 60       	ori	r24, 0x03	; 3
 260:	84 bd       	out	0x24, r24	; 36
		TCCR0B |= (1 << WGM02) ;
 262:	85 b5       	in	r24, 0x25	; 37
 264:	88 60       	ori	r24, 0x08	; 8
 266:	85 bd       	out	0x25, r24	; 37
		
		/*enable OC0A pin (pin D6)*/
		TCCR0A |=(1 << COM0A1);
 268:	84 b5       	in	r24, 0x24	; 36
 26a:	80 68       	ori	r24, 0x80	; 128
 26c:	84 bd       	out	0x24, r24	; 36
		/* preset 256 4.096ms  */
		//TCCR0B |= (1 << CS02);
		
	
	long double T_on;
	DDRC |= (1 << DDC5);
 26e:	3d 9a       	sbi	0x07, 5	; 7
	DDRD |= (1<< DDD6);
 270:	56 9a       	sbi	0x0a, 6	; 10
			
		 T_on = 1/(440* (pow(2,1/12)));
		 
		 
		 	 
		 	 OCR0A = 256*(T_on/MAXTIME)-1;
 272:	c3 e2       	ldi	r28, 0x23	; 35
	

    /* Replace with your application code */
    while (1) 
    {
		char y=  Scan_KeypadC ();
 274:	0e 94 88 00 	call	0x110	; 0x110 <Scan_KeypadC>
		
	
		
		switch (y)
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	fc 01       	movw	r30, r24
 27c:	b3 97       	sbiw	r30, 0x23	; 35
 27e:	e2 32       	cpi	r30, 0x22	; 34
 280:	f1 05       	cpc	r31, r1
 282:	c0 f7       	brcc	.-16     	; 0x274 <main+0x18>
 284:	e6 5a       	subi	r30, 0xA6	; 166
 286:	ff 4f       	sbci	r31, 0xFF	; 255
 288:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__tablejump2__>
			case '1': 
				
			
		 T_on = 1/(440* (pow(2,0/12)));  // .0027 ms or 2.27us
		 
		 OCR0A = 256*(T_on/MAXTIME)-1;
 28c:	c7 bd       	out	0x27, r28	; 39
		 OCR0B = OCR0A/2;
 28e:	87 b5       	in	r24, 0x27	; 39
 290:	86 95       	lsr	r24
 292:	88 bd       	out	0x28, r24	; 40
		//ON;
		//_delay_ms(T_on);
		//OFF;
		//_delay_ms(T_on);
			
			break;
 294:	ef cf       	rjmp	.-34     	; 0x274 <main+0x18>
			
		 T_on = 1/(440* (pow(2,1/12)));
		 
		 
		 	 
		 	 OCR0A = 256*(T_on/MAXTIME)-1;
 296:	c7 bd       	out	0x27, r28	; 39
		 	 OCR0B = OCR0A/2;
 298:	87 b5       	in	r24, 0x27	; 39
 29a:	86 95       	lsr	r24
 29c:	88 bd       	out	0x28, r24	; 40
		 	 
		 	 
		 	 ON;
 29e:	45 9a       	sbi	0x08, 5	; 8
		 	 while ( (TIFR0 & (1 << OCF0B) ) == 0){} // wait for OCR0B overflow event
 2a0:	aa 9b       	sbis	0x15, 2	; 21
 2a2:	fe cf       	rjmp	.-4      	; 0x2a0 <main+0x44>
		 	 TIFR0 |= (1 << OCF0B);
 2a4:	aa 9a       	sbi	0x15, 2	; 21
		 	 

		 	 OFF;
 2a6:	45 98       	cbi	0x08, 5	; 8
		 	 while ( (TIFR0 & (1 << OCF0A) ) == 0){} // wait for OCR0A overflow event
 2a8:	a9 9b       	sbis	0x15, 1	; 21
 2aa:	fe cf       	rjmp	.-4      	; 0x2a8 <main+0x4c>
		 	 TIFR0 |= (1 << OCF0A);
 2ac:	a9 9a       	sbi	0x15, 1	; 21
		//_delay_ms(T_on);
		
		
		
		
			 break;
 2ae:	e2 cf       	rjmp	.-60     	; 0x274 <main+0x18>
			 
		case '3':
		T_on = 1/(440* (pow(2,2/12)));
		ON;
 2b0:	45 9a       	sbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b2:	8c e0       	ldi	r24, 0x0C	; 12
 2b4:	8a 95       	dec	r24
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <main+0x58>
 2b8:	00 00       	nop
		_delay_ms(T_on);
		OFF;
 2ba:	45 98       	cbi	0x08, 5	; 8
 2bc:	8c e0       	ldi	r24, 0x0C	; 12
 2be:	8a 95       	dec	r24
 2c0:	f1 f7       	brne	.-4      	; 0x2be <main+0x62>
 2c2:	00 00       	nop
 2c4:	d7 cf       	rjmp	.-82     	; 0x274 <main+0x18>
		_delay_ms(T_on);
		break;	
		
				case 'A':
				T_on = 1/(440* (pow(2,3/12)));
				ON;
 2c6:	45 9a       	sbi	0x08, 5	; 8
 2c8:	8c e0       	ldi	r24, 0x0C	; 12
 2ca:	8a 95       	dec	r24
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <main+0x6e>
 2ce:	00 00       	nop
				_delay_ms(T_on);
				OFF;
 2d0:	45 98       	cbi	0x08, 5	; 8
 2d2:	8c e0       	ldi	r24, 0x0C	; 12
 2d4:	8a 95       	dec	r24
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <main+0x78>
 2d8:	00 00       	nop
 2da:	cc cf       	rjmp	.-104    	; 0x274 <main+0x18>
				break;
				
				
				case '4':
				T_on = 1/(440* (pow(2,4/12)));
				ON;
 2dc:	45 9a       	sbi	0x08, 5	; 8
 2de:	8c e0       	ldi	r24, 0x0C	; 12
 2e0:	8a 95       	dec	r24
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <main+0x84>
 2e4:	00 00       	nop
				_delay_ms(T_on);
				OFF;
 2e6:	45 98       	cbi	0x08, 5	; 8
 2e8:	8c e0       	ldi	r24, 0x0C	; 12
 2ea:	8a 95       	dec	r24
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <main+0x8e>
 2ee:	00 00       	nop
 2f0:	c1 cf       	rjmp	.-126    	; 0x274 <main+0x18>
				break;
				
				
			case '5':
			T_on = 1/(440* (pow(2,5/12)));
			ON;
 2f2:	45 9a       	sbi	0x08, 5	; 8
 2f4:	8c e0       	ldi	r24, 0x0C	; 12
 2f6:	8a 95       	dec	r24
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <main+0x9a>
 2fa:	00 00       	nop
			_delay_ms(T_on);
			OFF;
 2fc:	45 98       	cbi	0x08, 5	; 8
 2fe:	8c e0       	ldi	r24, 0x0C	; 12
 300:	8a 95       	dec	r24
 302:	f1 f7       	brne	.-4      	; 0x300 <main+0xa4>
 304:	00 00       	nop
 306:	b6 cf       	rjmp	.-148    	; 0x274 <main+0x18>
			_delay_ms(T_on);
			break;
			
			case '6':
			T_on = 1/(440* (pow(2,6/12)));
			ON;
 308:	45 9a       	sbi	0x08, 5	; 8
 30a:	8c e0       	ldi	r24, 0x0C	; 12
 30c:	8a 95       	dec	r24
 30e:	f1 f7       	brne	.-4      	; 0x30c <main+0xb0>
 310:	00 00       	nop
			_delay_ms(T_on);
			OFF;
 312:	45 98       	cbi	0x08, 5	; 8
 314:	8c e0       	ldi	r24, 0x0C	; 12
 316:	8a 95       	dec	r24
 318:	f1 f7       	brne	.-4      	; 0x316 <main+0xba>
 31a:	00 00       	nop
 31c:	ab cf       	rjmp	.-170    	; 0x274 <main+0x18>
			break;
			
			
			case 'B':
			T_on = 1/(440* (pow(2,7/12)));
			ON;
 31e:	45 9a       	sbi	0x08, 5	; 8
 320:	8c e0       	ldi	r24, 0x0C	; 12
 322:	8a 95       	dec	r24
 324:	f1 f7       	brne	.-4      	; 0x322 <main+0xc6>
 326:	00 00       	nop
			_delay_ms(T_on);
			OFF;
 328:	45 98       	cbi	0x08, 5	; 8
 32a:	8c e0       	ldi	r24, 0x0C	; 12
 32c:	8a 95       	dec	r24
 32e:	f1 f7       	brne	.-4      	; 0x32c <main+0xd0>
 330:	00 00       	nop
 332:	a0 cf       	rjmp	.-192    	; 0x274 <main+0x18>
			_delay_ms(T_on);
			break;
			
			case '7':
			T_on = 1/(440* (pow(2,8/12)));
			ON;
 334:	45 9a       	sbi	0x08, 5	; 8
 336:	8c e0       	ldi	r24, 0x0C	; 12
 338:	8a 95       	dec	r24
 33a:	f1 f7       	brne	.-4      	; 0x338 <main+0xdc>
 33c:	00 00       	nop
			_delay_ms(T_on);
			OFF;
 33e:	45 98       	cbi	0x08, 5	; 8
 340:	8c e0       	ldi	r24, 0x0C	; 12
 342:	8a 95       	dec	r24
 344:	f1 f7       	brne	.-4      	; 0x342 <main+0xe6>
 346:	00 00       	nop
 348:	95 cf       	rjmp	.-214    	; 0x274 <main+0x18>
			break;
		
		
		case '8':
		T_on = 1/(440* (pow(2,9/12)));
		ON;
 34a:	45 9a       	sbi	0x08, 5	; 8
 34c:	8c e0       	ldi	r24, 0x0C	; 12
 34e:	8a 95       	dec	r24
 350:	f1 f7       	brne	.-4      	; 0x34e <main+0xf2>
 352:	00 00       	nop
		_delay_ms(T_on);
		OFF;
 354:	45 98       	cbi	0x08, 5	; 8
 356:	8c e0       	ldi	r24, 0x0C	; 12
 358:	8a 95       	dec	r24
 35a:	f1 f7       	brne	.-4      	; 0x358 <main+0xfc>
 35c:	00 00       	nop
 35e:	8a cf       	rjmp	.-236    	; 0x274 <main+0x18>
		break;
		
		
			case '9':
			T_on = 1/(440* (pow(2,10/12)));
			ON;
 360:	45 9a       	sbi	0x08, 5	; 8
 362:	8c e0       	ldi	r24, 0x0C	; 12
 364:	8a 95       	dec	r24
 366:	f1 f7       	brne	.-4      	; 0x364 <main+0x108>
 368:	00 00       	nop
			_delay_ms(T_on);
			OFF;
 36a:	45 98       	cbi	0x08, 5	; 8
 36c:	8c e0       	ldi	r24, 0x0C	; 12
 36e:	8a 95       	dec	r24
 370:	f1 f7       	brne	.-4      	; 0x36e <main+0x112>
 372:	00 00       	nop
 374:	7f cf       	rjmp	.-258    	; 0x274 <main+0x18>
			break;
			
			
			case 'C':
			T_on = 1/(440* (pow(2,11/12)));
			ON;
 376:	45 9a       	sbi	0x08, 5	; 8
 378:	8c e0       	ldi	r24, 0x0C	; 12
 37a:	8a 95       	dec	r24
 37c:	f1 f7       	brne	.-4      	; 0x37a <main+0x11e>
 37e:	00 00       	nop
			_delay_ms(T_on);
			OFF;
 380:	45 98       	cbi	0x08, 5	; 8
 382:	8c e0       	ldi	r24, 0x0C	; 12
 384:	8a 95       	dec	r24
 386:	f1 f7       	brne	.-4      	; 0x384 <main+0x128>
 388:	00 00       	nop
 38a:	74 cf       	rjmp	.-280    	; 0x274 <main+0x18>
			break;
			
			
			case '*':
			T_on = 1/(440* (pow(2,12/12)));
			ON;
 38c:	45 9a       	sbi	0x08, 5	; 8
 38e:	86 e0       	ldi	r24, 0x06	; 6
 390:	8a 95       	dec	r24
 392:	f1 f7       	brne	.-4      	; 0x390 <main+0x134>
 394:	00 00       	nop
			_delay_ms(T_on);
			OFF;
 396:	45 98       	cbi	0x08, 5	; 8
 398:	86 e0       	ldi	r24, 0x06	; 6
 39a:	8a 95       	dec	r24
 39c:	f1 f7       	brne	.-4      	; 0x39a <main+0x13e>
 39e:	00 00       	nop
 3a0:	69 cf       	rjmp	.-302    	; 0x274 <main+0x18>
			break;
			
			
			case '0':
			T_on = 1/(440* (pow(2,13/12)));
			ON;
 3a2:	45 9a       	sbi	0x08, 5	; 8
 3a4:	86 e0       	ldi	r24, 0x06	; 6
 3a6:	8a 95       	dec	r24
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <main+0x14a>
 3aa:	00 00       	nop
			_delay_ms(T_on);
			OFF;
 3ac:	45 98       	cbi	0x08, 5	; 8
 3ae:	86 e0       	ldi	r24, 0x06	; 6
 3b0:	8a 95       	dec	r24
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <main+0x154>
 3b4:	00 00       	nop
 3b6:	5e cf       	rjmp	.-324    	; 0x274 <main+0x18>
			
			
			
			case '#':
			T_on = 1/(440* (pow(2,14/12)));
			ON;
 3b8:	45 9a       	sbi	0x08, 5	; 8
 3ba:	86 e0       	ldi	r24, 0x06	; 6
 3bc:	8a 95       	dec	r24
 3be:	f1 f7       	brne	.-4      	; 0x3bc <main+0x160>
 3c0:	00 00       	nop
			_delay_ms(T_on);
			OFF;
 3c2:	45 98       	cbi	0x08, 5	; 8
 3c4:	86 e0       	ldi	r24, 0x06	; 6
 3c6:	8a 95       	dec	r24
 3c8:	f1 f7       	brne	.-4      	; 0x3c6 <main+0x16a>
 3ca:	00 00       	nop
 3cc:	53 cf       	rjmp	.-346    	; 0x274 <main+0x18>
			break;
			
			
			case 'D':
			T_on = 1/(440* (pow(2,15/12)));
			ON;
 3ce:	45 9a       	sbi	0x08, 5	; 8
 3d0:	86 e0       	ldi	r24, 0x06	; 6
 3d2:	8a 95       	dec	r24
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <main+0x176>
 3d6:	00 00       	nop
			_delay_ms(T_on);
			OFF;
 3d8:	45 98       	cbi	0x08, 5	; 8
 3da:	86 e0       	ldi	r24, 0x06	; 6
 3dc:	8a 95       	dec	r24
 3de:	f1 f7       	brne	.-4      	; 0x3dc <main+0x180>
 3e0:	00 00       	nop
 3e2:	48 cf       	rjmp	.-368    	; 0x274 <main+0x18>

000003e4 <__tablejump2__>:
 3e4:	ee 0f       	add	r30, r30
 3e6:	ff 1f       	adc	r31, r31
 3e8:	05 90       	lpm	r0, Z+
 3ea:	f4 91       	lpm	r31, Z
 3ec:	e0 2d       	mov	r30, r0
 3ee:	09 94       	ijmp

000003f0 <_exit>:
 3f0:	f8 94       	cli

000003f2 <__stop_program>:
 3f2:	ff cf       	rjmp	.-2      	; 0x3f2 <__stop_program>
