
Keyboard2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000276  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ca  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b12  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000099f  00000000  00000000  00000e96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000057a  00000000  00000000  00001835  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001db0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f1  00000000  00000000  00001e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002f4  00000000  00000000  00002315  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002609  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 27 01 	call	0x24e	; 0x24e <main>
  c4:	0c 94 39 01 	jmp	0x272	; 0x272 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <UART_Initialize>:
	{
		PORTB |= (1 << PORTB5);
		x= '1';
	}
	return x;
}
  cc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  d0:	87 e6       	ldi	r24, 0x67	; 103
  d2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  d6:	e1 ec       	ldi	r30, 0xC1	; 193
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	88 61       	ori	r24, 0x18	; 24
  de:	80 83       	st	Z, r24
  e0:	e2 ec       	ldi	r30, 0xC2	; 194
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	86 60       	ori	r24, 0x06	; 6
  e8:	80 83       	st	Z, r24
  ea:	80 81       	ld	r24, Z
  ec:	87 7f       	andi	r24, 0xF7	; 247
  ee:	80 83       	st	Z, r24
  f0:	08 95       	ret

000000f2 <USART_Transmit>:
  f2:	e0 ec       	ldi	r30, 0xC0	; 192
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	90 81       	ld	r25, Z
  f8:	95 ff       	sbrs	r25, 5
  fa:	fd cf       	rjmp	.-6      	; 0xf6 <USART_Transmit+0x4>
  fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 100:	08 95       	ret

00000102 <Scan_KeypadC>:
char Scan_KeypadC ()

{
	char x = 'F';

	DDRC |= ((1 << DDC0)|(1 << DDC1)|(1 << DDC2)|(1 << DDC3));
 102:	87 b1       	in	r24, 0x07	; 7
 104:	8f 60       	ori	r24, 0x0F	; 15
 106:	87 b9       	out	0x07, r24	; 7
	PORTB |= ((1 << PORTB0)|(1 << PORTB1)|(1 << PORTB2)|(1 << PORTB3));
 108:	85 b1       	in	r24, 0x05	; 5
 10a:	8f 60       	ori	r24, 0x0F	; 15
 10c:	85 b9       	out	0x05, r24	; 5
 10e:	e1 e0       	ldi	r30, 0x01	; 1
 110:	f0 e0       	ldi	r31, 0x00	; 0


char Scan_KeypadC ()

{
	char x = 'F';
 112:	86 e4       	ldi	r24, 0x46	; 70
	for (int i =0; i< 4; i++)
	{
	
		
		PORTC |= ((1 << PORTC0)|(1 << PORTC1)|(1 << PORTC2)|(1 << PORTC3));
		PORTC &= ~(1 << i );
 114:	a1 e0       	ldi	r26, 0x01	; 1
 116:	b0 e0       	ldi	r27, 0x00	; 0
 118:	01 c0       	rjmp	.+2      	; 0x11c <Scan_KeypadC+0x1a>
 11a:	31 96       	adiw	r30, 0x01	; 1
 11c:	9f 01       	movw	r18, r30
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	31 09       	sbc	r19, r1
	
	for (int i =0; i< 4; i++)
	{
	
		
		PORTC |= ((1 << PORTC0)|(1 << PORTC1)|(1 << PORTC2)|(1 << PORTC3));
 122:	98 b1       	in	r25, 0x08	; 8
 124:	9f 60       	ori	r25, 0x0F	; 15
 126:	98 b9       	out	0x08, r25	; 8
		PORTC &= ~(1 << i );
 128:	48 b1       	in	r20, 0x08	; 8
 12a:	bd 01       	movw	r22, r26
 12c:	02 2e       	mov	r0, r18
 12e:	02 c0       	rjmp	.+4      	; 0x134 <Scan_KeypadC+0x32>
 130:	66 0f       	add	r22, r22
 132:	77 1f       	adc	r23, r23
 134:	0a 94       	dec	r0
 136:	e2 f7       	brpl	.-8      	; 0x130 <Scan_KeypadC+0x2e>
 138:	96 2f       	mov	r25, r22
 13a:	90 95       	com	r25
 13c:	94 23       	and	r25, r20
 13e:	98 b9       	out	0x08, r25	; 8
		
		
		switch (i)
 140:	21 30       	cpi	r18, 0x01	; 1
 142:	31 05       	cpc	r19, r1
 144:	11 f1       	breq	.+68     	; 0x18a <Scan_KeypadC+0x88>
 146:	40 f0       	brcs	.+16     	; 0x158 <Scan_KeypadC+0x56>
 148:	22 30       	cpi	r18, 0x02	; 2
 14a:	31 05       	cpc	r19, r1
 14c:	b9 f1       	breq	.+110    	; 0x1bc <Scan_KeypadC+0xba>
 14e:	23 30       	cpi	r18, 0x03	; 3
 150:	31 05       	cpc	r19, r1
 152:	09 f4       	brne	.+2      	; 0x156 <Scan_KeypadC+0x54>
 154:	49 c0       	rjmp	.+146    	; 0x1e8 <Scan_KeypadC+0xe6>
 156:	5e c0       	rjmp	.+188    	; 0x214 <Scan_KeypadC+0x112>
		{
			case 0:
			if (!(PINB &= (1 << PINB0)))
 158:	93 b1       	in	r25, 0x03	; 3
 15a:	91 70       	andi	r25, 0x01	; 1
 15c:	93 b9       	out	0x03, r25	; 3
 15e:	99 23       	and	r25, r25
 160:	09 f4       	brne	.+2      	; 0x164 <Scan_KeypadC+0x62>
 162:	5d c0       	rjmp	.+186    	; 0x21e <Scan_KeypadC+0x11c>
			{
				x='1';
			}
			else if (!(PINB &= (1 << PINB1)))
 164:	93 b1       	in	r25, 0x03	; 3
 166:	92 70       	andi	r25, 0x02	; 2
 168:	93 b9       	out	0x03, r25	; 3
 16a:	99 23       	and	r25, r25
 16c:	09 f4       	brne	.+2      	; 0x170 <Scan_KeypadC+0x6e>
 16e:	59 c0       	rjmp	.+178    	; 0x222 <Scan_KeypadC+0x120>
			{
				x ='2';
			}
			
			else if (!(PINB &= (1 << PINB2)))
 170:	93 b1       	in	r25, 0x03	; 3
 172:	94 70       	andi	r25, 0x04	; 4
 174:	93 b9       	out	0x03, r25	; 3
 176:	99 23       	and	r25, r25
 178:	09 f4       	brne	.+2      	; 0x17c <Scan_KeypadC+0x7a>
 17a:	55 c0       	rjmp	.+170    	; 0x226 <Scan_KeypadC+0x124>
			{
				x ='3';
			}
			else if (!(PINB &= (1 << PINB3)))
 17c:	93 b1       	in	r25, 0x03	; 3
 17e:	98 70       	andi	r25, 0x08	; 8
 180:	93 b9       	out	0x03, r25	; 3
 182:	91 11       	cpse	r25, r1
 184:	ca cf       	rjmp	.-108    	; 0x11a <Scan_KeypadC+0x18>
			{
				x='A';
 186:	81 e4       	ldi	r24, 0x41	; 65
 188:	c8 cf       	rjmp	.-112    	; 0x11a <Scan_KeypadC+0x18>
			}
			break;
			
			
			case 1:
			if (!(PINB &= (1 << PINB0)))
 18a:	93 b1       	in	r25, 0x03	; 3
 18c:	91 70       	andi	r25, 0x01	; 1
 18e:	93 b9       	out	0x03, r25	; 3
 190:	99 23       	and	r25, r25
 192:	09 f4       	brne	.+2      	; 0x196 <Scan_KeypadC+0x94>
 194:	4a c0       	rjmp	.+148    	; 0x22a <Scan_KeypadC+0x128>
			{
				x='4';
			}
			else if (!(PINB &= (1 << PINB1)))
 196:	93 b1       	in	r25, 0x03	; 3
 198:	92 70       	andi	r25, 0x02	; 2
 19a:	93 b9       	out	0x03, r25	; 3
 19c:	99 23       	and	r25, r25
 19e:	09 f4       	brne	.+2      	; 0x1a2 <Scan_KeypadC+0xa0>
 1a0:	46 c0       	rjmp	.+140    	; 0x22e <Scan_KeypadC+0x12c>
			{
				x='5';
			}
			
			else if (!(PINB &= (1 << PINB2)))
 1a2:	93 b1       	in	r25, 0x03	; 3
 1a4:	94 70       	andi	r25, 0x04	; 4
 1a6:	93 b9       	out	0x03, r25	; 3
 1a8:	99 23       	and	r25, r25
 1aa:	09 f4       	brne	.+2      	; 0x1ae <Scan_KeypadC+0xac>
 1ac:	42 c0       	rjmp	.+132    	; 0x232 <Scan_KeypadC+0x130>
			{
				x='6';
			}
			else if (!(PINB &= (1 << PINB3)))
 1ae:	93 b1       	in	r25, 0x03	; 3
 1b0:	98 70       	andi	r25, 0x08	; 8
 1b2:	93 b9       	out	0x03, r25	; 3
 1b4:	91 11       	cpse	r25, r1
 1b6:	b1 cf       	rjmp	.-158    	; 0x11a <Scan_KeypadC+0x18>
			{
				x='B';
 1b8:	82 e4       	ldi	r24, 0x42	; 66
 1ba:	af cf       	rjmp	.-162    	; 0x11a <Scan_KeypadC+0x18>
			}
			break;
			
			case 2:
			if (!(PINB &= (1 << PINB0)))
 1bc:	93 b1       	in	r25, 0x03	; 3
 1be:	91 70       	andi	r25, 0x01	; 1
 1c0:	93 b9       	out	0x03, r25	; 3
 1c2:	99 23       	and	r25, r25
 1c4:	c1 f1       	breq	.+112    	; 0x236 <Scan_KeypadC+0x134>
			{
				x='7';
			}
			else if (!(PINB &= (1 << PINB1)))
 1c6:	93 b1       	in	r25, 0x03	; 3
 1c8:	92 70       	andi	r25, 0x02	; 2
 1ca:	93 b9       	out	0x03, r25	; 3
 1cc:	99 23       	and	r25, r25
 1ce:	a9 f1       	breq	.+106    	; 0x23a <Scan_KeypadC+0x138>
			{
				x='8';
			}
			
			else if (!(PINB &= (1 << PINB2)))
 1d0:	93 b1       	in	r25, 0x03	; 3
 1d2:	94 70       	andi	r25, 0x04	; 4
 1d4:	93 b9       	out	0x03, r25	; 3
 1d6:	99 23       	and	r25, r25
 1d8:	91 f1       	breq	.+100    	; 0x23e <Scan_KeypadC+0x13c>
			{
				x='9';
			}
			else if (!(PINB &= (1 << PINB3)))
 1da:	93 b1       	in	r25, 0x03	; 3
 1dc:	98 70       	andi	r25, 0x08	; 8
 1de:	93 b9       	out	0x03, r25	; 3
 1e0:	91 11       	cpse	r25, r1
 1e2:	9b cf       	rjmp	.-202    	; 0x11a <Scan_KeypadC+0x18>
			{
				x='C';
 1e4:	83 e4       	ldi	r24, 0x43	; 67
 1e6:	99 cf       	rjmp	.-206    	; 0x11a <Scan_KeypadC+0x18>
			}
			break;
			
			case 3:
			if (!(PINB &= (1 << PINB0)))
 1e8:	93 b1       	in	r25, 0x03	; 3
 1ea:	91 70       	andi	r25, 0x01	; 1
 1ec:	93 b9       	out	0x03, r25	; 3
 1ee:	99 23       	and	r25, r25
 1f0:	41 f1       	breq	.+80     	; 0x242 <Scan_KeypadC+0x140>
			{
				x='*';
			}
			else if (!(PINB &= (1 << PINB1)))
 1f2:	93 b1       	in	r25, 0x03	; 3
 1f4:	92 70       	andi	r25, 0x02	; 2
 1f6:	93 b9       	out	0x03, r25	; 3
 1f8:	99 23       	and	r25, r25
 1fa:	29 f1       	breq	.+74     	; 0x246 <Scan_KeypadC+0x144>
			{
				x='0';
			}
			
			else if (!(PINB &= (1 << PINB2)))
 1fc:	93 b1       	in	r25, 0x03	; 3
 1fe:	94 70       	andi	r25, 0x04	; 4
 200:	93 b9       	out	0x03, r25	; 3
 202:	99 23       	and	r25, r25
 204:	11 f1       	breq	.+68     	; 0x24a <Scan_KeypadC+0x148>
			{
				x='#';
			}
			else if (!(PINB &= (1 << PINB3)))
 206:	93 b1       	in	r25, 0x03	; 3
 208:	98 70       	andi	r25, 0x08	; 8
 20a:	93 b9       	out	0x03, r25	; 3
 20c:	91 11       	cpse	r25, r1
 20e:	1e c0       	rjmp	.+60     	; 0x24c <Scan_KeypadC+0x14a>
			{
				x='D';
 210:	84 e4       	ldi	r24, 0x44	; 68
 212:	08 95       	ret

	DDRC |= ((1 << DDC0)|(1 << DDC1)|(1 << DDC2)|(1 << DDC3));
	PORTB |= ((1 << PORTB0)|(1 << PORTB1)|(1 << PORTB2)|(1 << PORTB3));
	
	
	for (int i =0; i< 4; i++)
 214:	e4 30       	cpi	r30, 0x04	; 4
 216:	f1 05       	cpc	r31, r1
 218:	0c f4       	brge	.+2      	; 0x21c <Scan_KeypadC+0x11a>
 21a:	7f cf       	rjmp	.-258    	; 0x11a <Scan_KeypadC+0x18>
 21c:	08 95       	ret
		switch (i)
		{
			case 0:
			if (!(PINB &= (1 << PINB0)))
			{
				x='1';
 21e:	81 e3       	ldi	r24, 0x31	; 49
 220:	7c cf       	rjmp	.-264    	; 0x11a <Scan_KeypadC+0x18>
			}
			else if (!(PINB &= (1 << PINB1)))
			{
				x ='2';
 222:	82 e3       	ldi	r24, 0x32	; 50
 224:	7a cf       	rjmp	.-268    	; 0x11a <Scan_KeypadC+0x18>
			}
			
			else if (!(PINB &= (1 << PINB2)))
			{
				x ='3';
 226:	83 e3       	ldi	r24, 0x33	; 51
 228:	78 cf       	rjmp	.-272    	; 0x11a <Scan_KeypadC+0x18>
			
			
			case 1:
			if (!(PINB &= (1 << PINB0)))
			{
				x='4';
 22a:	84 e3       	ldi	r24, 0x34	; 52
 22c:	76 cf       	rjmp	.-276    	; 0x11a <Scan_KeypadC+0x18>
			}
			else if (!(PINB &= (1 << PINB1)))
			{
				x='5';
 22e:	85 e3       	ldi	r24, 0x35	; 53
 230:	74 cf       	rjmp	.-280    	; 0x11a <Scan_KeypadC+0x18>
			}
			
			else if (!(PINB &= (1 << PINB2)))
			{
				x='6';
 232:	86 e3       	ldi	r24, 0x36	; 54
 234:	72 cf       	rjmp	.-284    	; 0x11a <Scan_KeypadC+0x18>
			break;
			
			case 2:
			if (!(PINB &= (1 << PINB0)))
			{
				x='7';
 236:	87 e3       	ldi	r24, 0x37	; 55
 238:	70 cf       	rjmp	.-288    	; 0x11a <Scan_KeypadC+0x18>
			}
			else if (!(PINB &= (1 << PINB1)))
			{
				x='8';
 23a:	88 e3       	ldi	r24, 0x38	; 56
 23c:	6e cf       	rjmp	.-292    	; 0x11a <Scan_KeypadC+0x18>
			}
			
			else if (!(PINB &= (1 << PINB2)))
			{
				x='9';
 23e:	89 e3       	ldi	r24, 0x39	; 57
 240:	6c cf       	rjmp	.-296    	; 0x11a <Scan_KeypadC+0x18>
			break;
			
			case 3:
			if (!(PINB &= (1 << PINB0)))
			{
				x='*';
 242:	8a e2       	ldi	r24, 0x2A	; 42
 244:	08 95       	ret
			}
			else if (!(PINB &= (1 << PINB1)))
			{
				x='0';
 246:	80 e3       	ldi	r24, 0x30	; 48
 248:	08 95       	ret
			}
			
			else if (!(PINB &= (1 << PINB2)))
			{
				x='#';
 24a:	83 e2       	ldi	r24, 0x23	; 35
		
		
	}

	return x;
 24c:	08 95       	ret

0000024e <main>:
char Scan_KeypadC ();
char ToggleUserButton ();

int main(void)
{
	UART_Initialize();
 24e:	0e 94 66 00 	call	0xcc	; 0xcc <UART_Initialize>
	
    /* Replace with your application code */
    while (1) 
    {
	
		y=  Scan_KeypadC ();
 252:	0e 94 81 00 	call	0x102	; 0x102 <Scan_KeypadC>
	//	x= ToggleUserButton ();
	//	_delay_ms(1000);
	//    USART_Transmit( x);
		
		if ( y == 'F')
 256:	86 34       	cpi	r24, 0x46	; 70
 258:	e1 f3       	breq	.-8      	; 0x252 <main+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25a:	2f ef       	ldi	r18, 0xFF	; 255
 25c:	30 e7       	ldi	r19, 0x70	; 112
 25e:	92 e0       	ldi	r25, 0x02	; 2
 260:	21 50       	subi	r18, 0x01	; 1
 262:	30 40       	sbci	r19, 0x00	; 0
 264:	90 40       	sbci	r25, 0x00	; 0
 266:	e1 f7       	brne	.-8      	; 0x260 <main+0x12>
 268:	00 c0       	rjmp	.+0      	; 0x26a <main+0x1c>
 26a:	00 00       	nop
			
		}
		else 
		{
			_delay_ms(50);
			USART_Transmit(y);
 26c:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_Transmit>
 270:	f0 cf       	rjmp	.-32     	; 0x252 <main+0x4>

00000272 <_exit>:
 272:	f8 94       	cli

00000274 <__stop_program>:
 274:	ff cf       	rjmp	.-2      	; 0x274 <__stop_program>
